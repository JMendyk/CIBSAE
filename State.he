
signature State (T: Type) =
| get : Unit => T
| put : T => Unit

let modifyState f = put (f (get ()))

let runState init =
    handler
    | get () => fn s => resume  s s
    | put  s => fn _ => resume () s
    | return x => fn s => (s, x)
    | finally f => f init
    end

let evalState init =
    handler
    | get () => fn s => resume  s s
    | put  s => fn _ => resume () s
    | return x => fn _ => x
    | finally f => f init
    end

let execState init =
    handler
    | get () => fn s => resume  s s
    | put  s => fn _ => resume () s
    | return _ => fn s => s
    | finally f => f init
    end

let embedState {E: Effect} {V: Type} (getter: Unit ->[E] V) (setter: V ->[E] Unit) =
    handler
    | get () => resume (getter ())
    | put  s => setter s; resume ()
    end
