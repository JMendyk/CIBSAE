import Common

import String
import List
import Char

let ( $ ) f x = f x
let (<.>) f g x = f (g x)

let setFst x (_, y) = (x, y)
let setSnd y (x, _) = (x, y)
let modifyFst f (x, y) = (f x, y)
let modifySnd f (x, y) = (x, f y)

let filter p =
    let rec filter xs =
        match xs with
        | [] => []
        | (x::xs) => if p x then x::(filter xs) else filter xs
        end
    in filter

(* Adapted from https:\/\/github.com\/ocaml\/ocaml\/blob\/trunk\/stdlib\/list.ml  *)

let concatMap f =
    let rec aux f acc l =
        match l with
        | [] => List.rev acc
        | x :: l => let xs = f x in
                        aux f (List.revAppend xs acc) l
        end
    in aux f []

let zip =
    let rec zip xs ys =
        match (xs, ys) with
        | ([], []) => []
        | ([], _) => []
        | (_, []) => []
        | (x :: xs, y :: ys) => (x, y) :: zip xs ys
        end
    in zip

let member {T: Type} (module TM: Common.Comparable T) (a: T) (xs: List T) =
    open TM in
    let rec member (xs: List T) =
        match xs with
        | [] => False
        | (x::xs) => match compare a x with
                     | EQ => True
                     |  _ => member xs
                     end
        end
    in member xs

let listTToString {T: Type} (module TM: Common.Showable T) (xs: List T) =
    open TM in
    let rec withSep xs sep = match xs with
                             | [] => ""
                             | [x] => toString x
                             | (x::xs) => toString x ++ ", " ++ withSep xs sep
                             end
    in
    "[" ++ withSep xs "," ++ "]"

let printIntList = printStr <.> listTToString
    struct
        let type this = Int
        let toString = stringOfInt
    end


(* Very, very bad string hashing function *)
let stringHash s =
    let mod = extern "helium_modInt" : Int -> Int -> Int
    let (a, b) = (113, 251)
    let rec aux n xs = match xs with
                   | [] => n
                   | x::xs => aux (mod (n * a) b) xs
                   end
    let strToList s =
        let rec strToList' n s = (Char.code (String.get n s)) :: strToList' (n+1) s
        in strToList' 0 s
    in aux 0 (strToList s)
