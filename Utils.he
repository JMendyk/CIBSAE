import Common

let filter p xs =
    let rec filter xs =
        match xs with
        | [] => []
        | (x::xs) => if p x then x::(filter xs) else filter xs
        end
    in filter xs

let member (module T: Common.KeyOrder) (a: T.this) (xs: List T.this) =
    let rec member (xs: List T.this) =
        match xs with
        | [] => False
        | (x::xs) => match T.compare a x with
                     | EQ => True
                     |  _ => member xs
                     end
        end
    in member xs

type ToString = sig
     type this: Type
     val toString: this -> String
end

let listTToString (module T: ToString) xs =
    open T in
    let rec withSep xs sep = match xs with
                             | [] => ""
                             | [x] => toString x
                             | (x::xs) => toString x ++ ", " ++ withSep xs sep
                             end
    in
    "[" ++ withSep xs "," ++ "]"