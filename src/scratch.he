import Common
import Store
import Spreadsheet
import Utils
import Systems

import String
import List

open Common
open Store
open Spreadsheet
open Systems
open Utils

let sprsh1_B1 () = fetch (C "A1") + fetch (C "A2")
let sprsh1_B2 () = fetch (C "A2") + fetch (C "A3")
let sprsh1_C3 () = fetch B1 + fetch B2

let sprsh1 (cid: SpreadsheetCell) =
    match cid with
    | B1 => Some $ Task sprsh1_B1
    | B2 => Some $ Task sprsh1_B2
    | C3 => Some $ Task sprsh1_C3
    | _ => None
    end

let sprsh1_initState key = open String in
    match key with
    | (C c) => if equal c "A1" then 10 else
               if equal c "A2" then 20 else
               if equal c "A3" then 30 else 0
    | _ => 0
    end

let dumpStoreContents {I K: Type} {`s: StoreEff I K Int} (keys: List K) =
    printIntList (List.map (getValue `s) keys); printStr "\n"

let dumpGivenStoreContents {T: Type} (module TM: Comparable T) keys s =
    ignore(handle `s in
        dumpStoreContents keys
    with funStoreHandler TM s)

let dumpKeys = [C "A1", C "A2", C "A3", B1, B2, C3]

(* ------------------------------------------- Excel Demo ------------------------------------------- *)

let allDirtyInfo = (fn _ => True)
let allCleanInfo = (fn _ => False)
let allCleanButA1 x = match x with
                      | (C c) => String.equal c "A1" || allCleanInfo (C c)
                      | B1 => True | C3 => True
                      | x => allCleanInfo x
                      end
let allCleanButA3 x = match x with
                      | (C c) => String.equal c "A3" || allCleanInfo (C c)
                      | B2 => True | C3 => True
                      | x => allCleanInfo x
                      end

let excelDemo () =
    let store = FunStore (allDirtyInfo, []) sprsh1_initState in
    handle
        printStr "Input store:           "; dumpStoreContents dumpKeys;
        excel Spreadsheet sprsh1 C3;
        printStr "After first build:     "; dumpStoreContents dumpKeys;
        (* Key A1 was modified, dirty bit updated appropriately *)
        putValue (C "A1") 20; modifyInfo (mapFst (fn _ => allCleanButA1));
        printStr "After A1 was modified: "; dumpStoreContents dumpKeys;
        excel Spreadsheet sprsh1 C3;
        printStr "After second build:    "; dumpStoreContents dumpKeys
    with funStoreHandler CellOrder store

(* ------------------------------------------- Shake Demo ------------------------------------------- *)

let shakeDemo () =
    let store = FunStore [] sprsh1_initState in
    handle
        printStr "Input store:           "; dumpStoreContents dumpKeys;
        shake Spreadsheet sprsh1 C3;
        printStr "After first build:     "; dumpStoreContents dumpKeys;
        (* Key A1 was modified *)
        putValue (C "A1") 20;
        printStr "After A1 was modified: "; dumpStoreContents dumpKeys;
        shake Spreadsheet sprsh1 C3;
        printStr "After second build:    "; dumpStoreContents dumpKeys
    with funStoreHandler Spreadsheet.Key store

(* ---------------------------------------- Cloud Shake Demo ---------------------------------------- *)

let cloudShakeDemo () =
    let store = FunStore [] sprsh1_initState in
    handle
        printStr "Input store:           "; dumpStoreContents dumpKeys;
        cloudShake Spreadsheet sprsh1 C3;
        printStr "After first build:     "; dumpStoreContents dumpKeys;
        (* Key A1 was modified *)
        putValue (C "A1") 20;
        printStr "After A1 was modified: "; dumpStoreContents dumpKeys;
        cloudShake Spreadsheet sprsh1 C3;
        printStr "After second build:    "; dumpStoreContents dumpKeys
    with funStoreHandler Spreadsheet.Key store

(* -------------------------------------------- Nix Demo -------------------------------------------- *)

let nixDemo () =
    let store = FunStore [] sprsh1_initState in
    handle
        printStr "Input store:           "; dumpStoreContents dumpKeys;
        nix Spreadsheet sprsh1 C3;
        printStr "After first build:     "; dumpStoreContents dumpKeys;
        (* Key A1 was modified *)
        putValue (C "A1") 20;
        printStr "After A1 was modified: "; dumpStoreContents dumpKeys;
        nix Spreadsheet sprsh1 C3;
        printStr "After second build:    "; dumpStoreContents dumpKeys
    with funStoreHandler Spreadsheet.Key store

let _ = excelDemo ()
