import Common
import State
import Track
import Traces

import List

open Common
open State
open Track
open Traces



let hashedFetch hash =
    handler
    | fetch k => resume (hash (fetch k))
    end

(* -------------------------------------------- Mod Time -------------------------------------------- *)

(* type Time = Int *)
(* type MakeInfo (K: KeyOrder) = let type MK = Map K in Pair Time (MK.this K.this) *)

(* {i v: Type} (module T: KeyOrder) {`a: StoreEff i T.this v} (tasks: Tasks T.this v) (key: T.this) *)
(* type Rebuilder (IR: Type) (K: Type) (V: Type) = {State IR} -> K -> V -> TaskType K V ->[`s] TaskType K V *)

(* let modTimeRebuilder {V: Type} (module T: KeyOrder) (key: T.this) (value: V) (task: TaskType T.this V) =  *)
(*     let type MK = Map T in *)
(*     let (now, modTimes) = get () in *)
(*     let dirty = handle MK.find key modTimes with *)
(*                 | not_found _ =>  in 0 *)

(* -------------------------------------------- Dirty Bit ------------------------------------------- *)

let dirtyBitRebuilder {K V: Type} {`s: State (K -> Bool)} (module KV: KeyValue K V) (key: K) (value: V) (task: TaskType K V (effect [])) = Task (fn (`b: BuildEff K V) () =>
    let isDirty = get `s () in
    if isDirty key then run task
                   else value)

(* ---------------------------------------- Verifying Traces ---------------------------------------- *)

let vtRebuilder {K V: Type} {`s: State (VT K V)} (module KV: KeyValue K V) (key: K) (value: V) (task: TaskType K V (effect [])) = Task (fn (`b: BuildEff K V) () =>
    open KV.Value in
    let upToDate = handle verifyVT KV key (hash value) with hashedFetch hash in
        if upToDate then value
        else (let (newValue, deps) = track task in
                 recordVT key (hash newValue) (List.map (fn (k, v) => (k, hash v)) deps);
                 newValue))

(* I'll leave it for now, since when manually checking vtRebuilder's type
   there's an extra effect in returned Task, but it doesn't seem to matter
   in usage cases. At least for now... *)

(* let (vtRebuilder: {K V: Type} -> {`s: State (VT K V)} -> KeyValue K V ->[] K ->[] V ->[] TaskType K V (effect []) ->[] TaskType K V (effect [`s])) = vtRebuilder666 *)

(* --------------------------------------- Constructive Traces -------------------------------------- *)

let ctRebuilder {K V: Type} {`s: State (CT K V)} (module KV: KeyValue K V) (key: K) (value: V) (task: TaskType K V (effect [])) = Task (fn (`b: BuildEff K V) () =>
    open KV.Value in
    let cachedValues = handle constructCT KV key (get `s ()) with hashedFetch hash in
        if Utils.member KV.Value value cachedValues
        then value
        else match cachedValues with
             | (cachedValue::_) => cachedValue
             | [] => let (newValue, deps) = track task in
                         recordCT `s key newValue (List.map (fn (k, v) => (k, hash v)) deps);
                         newValue
             end)

(* ------------------------------------ Deep Constructive Traces ------------------------------------ *)

let dctRebuilder {K V: Type} {`s: State (DCT K V)} (module KV: KeyValue K V) (key: K) (value: V) (task: TaskType K V (effect [])) = Task (fn (`b: BuildEff K V) () =>
    open KV.Value in
    let cachedValues = handle constructDCT KV key (get `s ()) with hashedFetch hash in
        if Utils.member KV.Value value cachedValues
        then value
        else match cachedValues with
             | (cachedValue::_) => cachedValue
             | [] => let (newValue, deps) = track task in
                     let handle `b with hashedFetch hash in
                         recordDCT `s `b KV key newValue (List.map fst deps);
                         newValue
             end)
